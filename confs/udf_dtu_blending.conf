general {
  base_exp_dir = ./exp/udf/dtu/CASE_NAME/
  expname = udf_dtu
  model_type = udf
  recording = [
    ./,
    ./models,
    ./dataset,
  ]
}

dataset {
  data_dir = /home/xiaoxiao/dataset/DTU_IDR/DTU/CASE_NAME/
  render_cameras_name = cameras.npz
  object_cameras_name = cameras.npz

  downsample_factor = 1.0
}

train {
  learning_rate = 5e-4
  learning_rate_geo = 1e-4
  learning_rate_alpha = 0.05
  end_iter = 300000

  batch_size = 512
  validate_resolution_level = 4
  warm_up_end = 5000
  anneal_end = 25000
  use_white_bkgd = False

  warmup_sample = False

  save_freq = 10000
  val_freq = 10
  val_mesh_freq = 2500
  report_freq = 100

  igr_weight = 0.1
  igr_ns_weight = 0.0
  mask_weight = 0.0
  sparse_weight = 0.0

}

color_loss {
  color_base_weight = 0.01
  color_weight = 1.0
  color_pixel_weight = 0.0  # will introduce errors
  color_patch_weight = 0.0
  pixel_loss_type = l1
  patch_loss_type = ssim
  h_patch_size = 3
}

model {
  nerf {
    D = 8,
    d_in = 4,
    d_in_view = 3,
    W = 256,
    multires = 10,
    multires_view = 4,
    output_ch = 4,
    skips = [4],
    use_viewdirs = True
  }

  udf_network {
    d_out = 257
    d_in = 3
    d_hidden = 256
    n_layers = 8
    skip_in = [4]
    multires = 6
    bias = 0.5
    scale = 1.0
    geometric_init = True
    weight_norm = True
    udf_type = abs  # square or abs
  }

  variance_network {
    init_val = 0.3
  }

  rendering_network {
    d_feature = 256
    mode = no_normal
    d_in = 6
    d_out = 3
    d_hidden = 128
    n_layers = 4
    weight_norm = True
    multires_view = 4
    squeeze_out = True
    blending_cand_views = 10
  }

  beta_network {
    init_var_beta = 0.5,
    init_var_gamma = 0.3,
    init_var_zeta = 0.3,
    beta_min = 0.00005,
    requires_grad_beta = True,
    requires_grad_gamma = False,
    requires_grad_zeta = False
  }

  udf_renderer {
    n_samples = 64
    n_importance = 50
    n_outside = 32
    up_sample_steps = 5    # 1 for simple coarse-to-fine sampling
    perturb = 1.0
    sdf2alpha_type = numerical   # better than theorical
    upsampling_type = classical  # better than mix
  }
}
